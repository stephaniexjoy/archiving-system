// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//Options for filtering

model Materials {
  id    Int    @id @default(autoincrement())
  value String @unique
  label String
}

model Filetype {
  id    Int    @id @default(autoincrement())
  value String @unique
  label String
}

model Courses {
  id    Int    @id @default(autoincrement())
  value String @unique
  label String
}

model Activity {
  id        Int      @id @unique @default(autoincrement())
  userId    Int
  name      String
  position  String
  type      String // Type of activity (e.g., "profile_edit", "file_upload")
  createdAt DateTime @default(now())

  // Define the relationship to the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 Int     @id @default(autoincrement())
  employee_no        String  @unique
  email              String  @unique
  password           String
  name               String
  age                Int
  sex                String
  position           String
  designation        String
  specialization     String
  license            String
  profile_photo_path String?
  certifications     String?

  // Reset Password Tokens and Expiry
  resetPasswordToken String?   @unique
  tokenExpiry        DateTime?

  // Relationship to the educational details
  education       User_Education? @relation(fields: [userEducationId], references: [id])
  userEducationId Int?            @unique

  // Relationship to the files uploaded by User
  uploadedFiles File[]
  Activity      Activity[]
  Tasks         Tasks[]
  CompletedTask CompletedTask[]
}

model User_Education {
  id                         Int     @id @default(autoincrement())
  userId                     Int     @unique
  school                     String?
  bacDegree                  String?
  bacSchool                  String?
  masDegree                  String?
  masSchool                  String?
  docDegree                  String?
  docSchool                  String?
  seminars_trainings         String?
  experience                 String?
  past_designation           String?
  subjects_handled           String?
  presented_papers_completed String?
  presented_papers_published String?
  presented_papers_presented String?
  extension_projs            String?

  // Define the relationship to the User model
  User User?
}

// File Entity
model File {
  User         User   @relation(fields: [userId], references: [id])
  userId       Int
  uploaderName String

  id           Int      @id @default(autoincrement())
  filename     String
  fileType     String
  // For file directory, will be updated soon
  filePath     String   @unique
  fileRole     String?
  fileMaterial String?
  fileProgram  String?
  //
  uploadDate   DateTime @default(now())
  description  String?
}

model Tasks {
  User         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  uploaderName String
  isUserDone   Boolean

  id              Int             @id @default(autoincrement())
  title           String
  deadlineCreated DateTime
  setDeadline     DateTime?
  isActive        Boolean
  description     String?
  CompletedTask   CompletedTask[]
}

model CompletedTask {
  id        Int      @id @default(autoincrement())
  userId    Int
  taskId    Int
  completed DateTime @default(now())

  // Define the relationship to the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Define the relationship to the Tasks model
  task Tasks @relation(fields: [taskId], references: [id])
}
